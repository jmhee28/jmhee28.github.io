I"<h1 id="웹페이지-종류별-크롤링-방식-결정-방법">웹페이지 종류별 크롤링 방식 결정 방법</h1>
<p><img src="/images/Crawling_method.jpg" alt="_config.yml" /></p>

<h2 id="메인-html-소스에-찾는-데이터가-존재하는-경우1-2번">메인 HTML 소스에 찾는 데이터가 존재하는 경우(1, 2번)</h2>

<h3 id="1-html-태그-안에-텍스트-형태로-존재하는-경우">1. HTML 태그 안에 텍스트 형태로 존재하는 경우</h3>

<ul>
  <li>웹페이지 주소에서 HTML을 불러온 후 cheerio를 이용해 요소를 찾아내는 방식을 사 용하면 됩니다.</li>
</ul>

<h3 id="2-script-태그-안에-자바스크립트-코드로-데이터가-하드코딩-된-경우">2. script 태그 안에 자바스크립트 코드로 데이터가 하드코딩 된 경우</h3>

<ul>
  <li>script 태그 안에 자바스크립트 코드를 인라인inline으로 작성하면 페이지가 로드되 면서 자동으로 실행됩니다. 이곳에 변수를 선언해 자바스크립트 코드 형태로 원하는 데이터를 하 드코딩해두면, 언제든 해당 변수에 접근해 데이터를 읽을 수 있습니다.</li>
</ul>

<h2 id="api를-호출해서-외부에서-데이터를-불러오는-경우3번">API를 호출해서 외부에서 데이터를 불러오는 경우(3번)</h2>

<p>웹브라우저로 웹페이지를 불러올 때는 분명히 찾는 데이터가 있는데 HTML 소스 보기를 하면 없는 경우도 자주 있습니다. 
보통 웹페이지 어딘가에서 API를 호출해서 추가로 데이터를 불러오기 때문일 가능성이 높습니다.</p>

<p>메인 HTML 내부에 기본 콘텐츠가 있고 일부 데이터는 동적으로 불러오는 웹사이트가 이에 해당 합니다.</p>
<ul>
  <li>웹페이지에서 사용하는 API는 일반적으로 HTTP 기반의 API를 많이 사용하므로 이런 API 호출이 일어났는지부터 확인해야 합니다.</li>
  <li>이때 크롬 [개발자 도구]의 [Network] 탭이 아주 유용합니다.</li>
</ul>
:ET