I"5"<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include</span> <span class="cpf">&lt;cstring&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="k">class</span> <span class="nc">Trie</span> <span class="p">{</span>
	<span class="k">static</span> <span class="k">constexpr</span> <span class="kt">size_t</span> <span class="n">M</span> <span class="o">=</span> <span class="mi">26</span><span class="p">;</span>
	<span class="k">static</span> <span class="k">constexpr</span> <span class="kt">char</span> <span class="n">OFFSET</span> <span class="o">=</span> <span class="sc">'a'</span><span class="p">;</span>

	<span class="k">struct</span> <span class="nc">TrieNode</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">child</span><span class="p">[</span><span class="n">M</span><span class="p">];</span>
		<span class="kt">bool</span> <span class="n">is_terminal</span><span class="p">;</span>

		<span class="n">TrieNode</span><span class="p">()</span> <span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">memset</span><span class="p">(</span><span class="n">child</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span><span class="p">);</span>
			<span class="n">is_terminal</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">};</span>

	<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">TrieNode</span><span class="o">&gt;</span> <span class="n">nodes</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">Trie</span><span class="p">()</span> <span class="o">:</span> <span class="n">nodes</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{}</span>

	<span class="kt">void</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">nodes</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
		<span class="n">nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">TrieNode</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="n">insert</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">node_id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">c</span> <span class="o">:</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">nodes</span><span class="p">[</span><span class="n">node_id</span><span class="p">].</span><span class="n">child</span><span class="p">[</span><span class="n">c</span> <span class="o">-</span> <span class="n">OFFSET</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">nodes</span><span class="p">[</span><span class="n">node_id</span><span class="p">].</span><span class="n">child</span><span class="p">[</span><span class="n">c</span> <span class="o">-</span> <span class="n">OFFSET</span><span class="p">]</span> <span class="o">=</span> <span class="n">nodes</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
				<span class="n">nodes</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">();</span>
			<span class="p">}</span>
			<span class="n">node_id</span> <span class="o">=</span> <span class="n">nodes</span><span class="p">[</span><span class="n">node_id</span><span class="p">].</span><span class="n">child</span><span class="p">[</span><span class="n">c</span> <span class="o">-</span> <span class="n">OFFSET</span><span class="p">];</span>
		<span class="p">}</span>
		<span class="n">nodes</span><span class="p">[</span><span class="n">node_id</span><span class="p">].</span><span class="n">is_terminal</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="n">remove</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">node_id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">c</span> <span class="o">:</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">nodes</span><span class="p">[</span><span class="n">node_id</span><span class="p">].</span><span class="n">child</span><span class="p">[</span><span class="n">c</span> <span class="o">-</span> <span class="n">OFFSET</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">return</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="n">node_id</span> <span class="o">=</span> <span class="n">nodes</span><span class="p">[</span><span class="n">node_id</span><span class="p">].</span><span class="n">child</span><span class="p">[</span><span class="n">c</span> <span class="o">-</span> <span class="n">OFFSET</span><span class="p">];</span>
		<span class="p">}</span>
		<span class="n">nodes</span><span class="p">[</span><span class="n">node_id</span><span class="p">].</span><span class="n">is_terminal</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">bool</span> <span class="n">find</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">node_id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">c</span> <span class="o">:</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">nodes</span><span class="p">[</span><span class="n">node_id</span><span class="p">].</span><span class="n">child</span><span class="p">[</span><span class="n">c</span> <span class="o">-</span> <span class="n">OFFSET</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="n">node_id</span> <span class="o">=</span> <span class="n">nodes</span><span class="p">[</span><span class="n">node_id</span><span class="p">].</span><span class="n">child</span><span class="p">[</span><span class="n">c</span> <span class="o">-</span> <span class="n">OFFSET</span><span class="p">];</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="n">nodes</span><span class="p">[</span><span class="n">node_id</span><span class="p">].</span><span class="n">is_terminal</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
:ET